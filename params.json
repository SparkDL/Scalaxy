{"name":"Scalaxy","tagline":"Compiler plugin goodies for Scala (continuation of non-OpenCL part of ScalaCL)","body":"Collection of Scala Macro goodies ([BSD-licensed](https://github.com/ochafik/Scalaxy/blob/master/LICENSE))\r\n- *[Loops](https://github.com/ochafik/Scalaxy/tree/master/Loops)* ([ScalaDoc](http://ochafik.github.io/Scalaxy/Loops/latest/api/index.html)) provide a macro that optimizes simple foreach loops by rewriting them to an equivalent while loop:\r\n\r\n    ```scala\r\n    import scalaxy.loops._\r\n    \r\n    for (i <- 0 until 100000000 optimized) { ... }\r\n    ```\r\n- *[Reified](https://github.com/ochafik/Scalaxy/tree/master/Reified)* ([ScalaDoc](http://ochafik.github.io/Scalaxy/Reified/latest/api/index.html)) provides a powerful reified values mechanism that deals well with composition and captures of runtime values, allowing for complex ASTs to be generated during runtime for re-compilation or transformation purposes. It preserves the original value that was reified, allowing for flexible mixed usage of runtime value and compile-time AST.\r\n\r\n    ```scala\r\n    import scalaxy.reified._\r\n    \r\n    def comp(capture1: Int): ReifiedFunction1[Int, Int] = {\r\n      val capture2 = Seq(10, 20, 30)\r\n      val f = reify((x: Int) => capture1 + capture2(x))\r\n      val g = reify((x: Int) => x * x)\r\n      \r\n      g.compose(f)\r\n    }\r\n    \r\n    println(\"AST: \" + comp(10).expr().tree)\r\n    ```\r\n\r\n- *[Debug](https://github.com/ochafik/Scalaxy/tree/master/Debug)* ([ScalaDoc](http://ochafik.github.io/Scalaxy/Debug/latest/api/index.html)) provides `assert`, `require` and `assume` macros that automatically add a useful message to the regular [Predef](http://www.scala-lang.org/api/current/index.html#scala.Predef$) calls.\r\n- *[MacroExtensions](https://github.com/ochafik/Scalaxy/tree/master/MacroExtensions)* ([ScalaDoc](http://ochafik.github.io/Scalaxy/MacroExtensions/latest/api/index.html)) provides an extremely simple (and *experimental*) syntax to define extensions methods as macros:\r\n\r\n    ```scala\r\n    @scalaxy.extension[Any] \r\n    def quoted(quote: String): String = \r\n      quote + self + quote\r\n      \r\n    @scalaxy.extension[Int] \r\n    def copiesOf[T : ClassTag](generator: => T): Array[T] = \r\n      Array.fill[T](self)(generator)\r\n  \r\n    ...\r\n    println(10.quoted(\"'\"))\r\n    // macro-expanded to `\"'\" + 10 + \"'\"`\r\n    \r\n    println(10 copiesOf new Entity)\r\n    // macro-expanded to `Array.fill(3)(new Entity)`\r\n    ```\r\n\r\n- *[Compilets](https://github.com/ochafik/Scalaxy/tree/master/Compilets)* ([ScalaDoc](http://ochafik.github.io/Scalaxy/Compilets/latest/api/index.html)) provide an easy way to express AST rewrites, backed by a compiler plugin and an sbt plugin.\r\n- *[Beans](https://github.com/ochafik/Scalaxy/tree/master/Beans)* ([ScalaDoc](http://ochafik.github.io/Scalaxy/Beans/latest/api/index.html)) are a nifty combination of Dynamics and macros that provide a type-safe eye-candy syntax to set fields of regular Java Beans in a Scala way (without any runtime dependency at all!):\r\n\r\n    ```scala\r\n    import scalaxy.beans._\r\n    \r\n    new MyBean().set(foo = 10, bar = 12)\r\n    ```\r\n\r\n- *[Fx](https://github.com/ochafik/Scalaxy/tree/master/Fx)* ([ScalaDoc](http://ochafik.github.io/Scalaxy/Fx/latest/api/index.html)) contains an experimental JavaFX DSL (with virtually no runtime dependency) that makes it easy to build objects and define event handlers:\r\n\r\n    ```scala\r\n    new Button().set(\r\n      text = bind {\r\n        s\"Hello, ${textField.getText}\"\r\n      },\r\n      onAction = {\r\n        println(\"Hello World!\")\r\n      }\r\n    )\r\n    ```\r\n\r\n# Discuss\r\n\r\nIf you have suggestions / questions:\r\n- [@ochafik on Twitter](http://twitter.com/ochafik)\r\n- [NativeLibs4Java mailing-list](groups.google.com/group/nativelibs4java)\r\n\r\nYou can also [file bugs and enhancement requests here](https://github.com/ochafik/Scalaxy/issues/new).\r\n\r\nAny help (testing, patches, bug reports) will be greatly appreciated!\r\n\r\n# Hacking\r\n\r\n- Pushing the site with each sub-project's Scaladoc at [http://ochafik.github.io/Scalaxy/](http://ochafik.github.io/Scalaxy/):\r\n\r\n    ```\r\n    sbt clean\r\n    sbt \"project scalaxy-doc\" ghpages-push-site\r\n    ```\r\n  (you can preview the site with `sbt \"project scalaxy-doc\" preview-site`)\r\n\r\n- Publishing projects on Sonatype OSS Repository + advertise on ls.implicit.ly (assuming correct credentials in `~/.sbt/0.12.4/sonatype.sbt`):\r\n\r\n    ```\r\n    sbt \"+ assembly\" \"+ publish\"\r\n    sbt \"project scalaxy\" ls-write-version lsync\r\n    ```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}